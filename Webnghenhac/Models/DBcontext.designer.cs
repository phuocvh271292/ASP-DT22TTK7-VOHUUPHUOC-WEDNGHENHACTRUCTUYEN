#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebNhac")]
	public partial class DBcontextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTheLoai(TheLoai instance);
    partial void UpdateTheLoai(TheLoai instance);
    partial void DeleteTheLoai(TheLoai instance);
    partial void InsertCaSi(CaSi instance);
    partial void UpdateCaSi(CaSi instance);
    partial void DeleteCaSi(CaSi instance);
    partial void InsertPlayList(PlayList instance);
    partial void UpdatePlayList(PlayList instance);
    partial void DeletePlayList(PlayList instance);
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    partial void InsertChuDe(ChuDe instance);
    partial void UpdateChuDe(ChuDe instance);
    partial void DeleteChuDe(ChuDe instance);
    partial void InsertNhac(Nhac instance);
    partial void UpdateNhac(Nhac instance);
    partial void DeleteNhac(Nhac instance);
    #endregion
		
		public DBcontextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebNhacConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TheLoai> TheLoais
		{
			get
			{
				return this.GetTable<TheLoai>();
			}
		}
		
		public System.Data.Linq.Table<CaSi> CaSis
		{
			get
			{
				return this.GetTable<CaSi>();
			}
		}
		
		public System.Data.Linq.Table<PlayList> PlayLists
		{
			get
			{
				return this.GetTable<PlayList>();
			}
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		public System.Data.Linq.Table<ChuDe> ChuDes
		{
			get
			{
				return this.GetTable<ChuDe>();
			}
		}
		
		public System.Data.Linq.Table<Nhac> Nhacs
		{
			get
			{
				return this.GetTable<Nhac>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TheLoai")]
	public partial class TheLoai : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaTL;
		
		private string _TenTL;
		
		private EntitySet<Nhac> _Nhacs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaTLChanging(int value);
    partial void OnMaTLChanged();
    partial void OnTenTLChanging(string value);
    partial void OnTenTLChanged();
    #endregion
		
		public TheLoai()
		{
			this._Nhacs = new EntitySet<Nhac>(new Action<Nhac>(this.attach_Nhacs), new Action<Nhac>(this.detach_Nhacs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTL", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaTL
		{
			get
			{
				return this._MaTL;
			}
			set
			{
				if ((this._MaTL != value))
				{
					this.OnMaTLChanging(value);
					this.SendPropertyChanging();
					this._MaTL = value;
					this.SendPropertyChanged("MaTL");
					this.OnMaTLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTL", DbType="NVarChar(100)")]
		public string TenTL
		{
			get
			{
				return this._TenTL;
			}
			set
			{
				if ((this._TenTL != value))
				{
					this.OnTenTLChanging(value);
					this.SendPropertyChanging();
					this._TenTL = value;
					this.SendPropertyChanged("TenTL");
					this.OnTenTLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheLoai_Nhac", Storage="_Nhacs", ThisKey="MaTL", OtherKey="MaTL")]
		public EntitySet<Nhac> Nhacs
		{
			get
			{
				return this._Nhacs;
			}
			set
			{
				this._Nhacs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nhacs(Nhac entity)
		{
			this.SendPropertyChanging();
			entity.TheLoai = this;
		}
		
		private void detach_Nhacs(Nhac entity)
		{
			this.SendPropertyChanging();
			entity.TheLoai = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CaSi")]
	public partial class CaSi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaCS;
		
		private string _TenCS;
		
		private EntitySet<Nhac> _Nhacs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaCSChanging(int value);
    partial void OnMaCSChanged();
    partial void OnTenCSChanging(string value);
    partial void OnTenCSChanged();
    #endregion
		
		public CaSi()
		{
			this._Nhacs = new EntitySet<Nhac>(new Action<Nhac>(this.attach_Nhacs), new Action<Nhac>(this.detach_Nhacs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCS", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaCS
		{
			get
			{
				return this._MaCS;
			}
			set
			{
				if ((this._MaCS != value))
				{
					this.OnMaCSChanging(value);
					this.SendPropertyChanging();
					this._MaCS = value;
					this.SendPropertyChanged("MaCS");
					this.OnMaCSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenCS", DbType="NVarChar(100)")]
		public string TenCS
		{
			get
			{
				return this._TenCS;
			}
			set
			{
				if ((this._TenCS != value))
				{
					this.OnTenCSChanging(value);
					this.SendPropertyChanging();
					this._TenCS = value;
					this.SendPropertyChanged("TenCS");
					this.OnTenCSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaSi_Nhac", Storage="_Nhacs", ThisKey="MaCS", OtherKey="MaCS")]
		public EntitySet<Nhac> Nhacs
		{
			get
			{
				return this._Nhacs;
			}
			set
			{
				this._Nhacs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nhacs(Nhac entity)
		{
			this.SendPropertyChanging();
			entity.CaSi = this;
		}
		
		private void detach_Nhacs(Nhac entity)
		{
			this.SendPropertyChanging();
			entity.CaSi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayList")]
	public partial class PlayList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Matk;
		
		private System.Nullable<int> _MaBH;
		
		private string _TenPL;
		
		private int _stt;
		
		private EntityRef<account> _account;
		
		private EntityRef<Nhac> _Nhac;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatkChanging(System.Nullable<int> value);
    partial void OnMatkChanged();
    partial void OnMaBHChanging(System.Nullable<int> value);
    partial void OnMaBHChanged();
    partial void OnTenPLChanging(string value);
    partial void OnTenPLChanged();
    partial void OnsttChanging(int value);
    partial void OnsttChanged();
    #endregion
		
		public PlayList()
		{
			this._account = default(EntityRef<account>);
			this._Nhac = default(EntityRef<Nhac>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Matk", DbType="Int")]
		public System.Nullable<int> Matk
		{
			get
			{
				return this._Matk;
			}
			set
			{
				if ((this._Matk != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatkChanging(value);
					this.SendPropertyChanging();
					this._Matk = value;
					this.SendPropertyChanged("Matk");
					this.OnMatkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaBH", DbType="Int")]
		public System.Nullable<int> MaBH
		{
			get
			{
				return this._MaBH;
			}
			set
			{
				if ((this._MaBH != value))
				{
					if (this._Nhac.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaBHChanging(value);
					this.SendPropertyChanging();
					this._MaBH = value;
					this.SendPropertyChanged("MaBH");
					this.OnMaBHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenPL", DbType="NVarChar(100)")]
		public string TenPL
		{
			get
			{
				return this._TenPL;
			}
			set
			{
				if ((this._TenPL != value))
				{
					this.OnTenPLChanging(value);
					this.SendPropertyChanging();
					this._TenPL = value;
					this.SendPropertyChanged("TenPL");
					this.OnTenPLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stt", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stt
		{
			get
			{
				return this._stt;
			}
			set
			{
				if ((this._stt != value))
				{
					this.OnsttChanging(value);
					this.SendPropertyChanging();
					this._stt = value;
					this.SendPropertyChanged("stt");
					this.OnsttChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_PlayList", Storage="_account", ThisKey="Matk", OtherKey="MaTK", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.PlayLists.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.PlayLists.Add(this);
						this._Matk = value.MaTK;
					}
					else
					{
						this._Matk = default(Nullable<int>);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nhac_PlayList", Storage="_Nhac", ThisKey="MaBH", OtherKey="MaBH", IsForeignKey=true)]
		public Nhac Nhac
		{
			get
			{
				return this._Nhac.Entity;
			}
			set
			{
				Nhac previousValue = this._Nhac.Entity;
				if (((previousValue != value) 
							|| (this._Nhac.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nhac.Entity = null;
						previousValue.PlayLists.Remove(this);
					}
					this._Nhac.Entity = value;
					if ((value != null))
					{
						value.PlayLists.Add(this);
						this._MaBH = value.MaBH;
					}
					else
					{
						this._MaBH = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nhac");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaTK;
		
		private string _Email;
		
		private string _PassWord;
		
		private System.Nullable<int> _Role;
		
		private string _Ten;
		
		private EntitySet<PlayList> _PlayLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaTKChanging(int value);
    partial void OnMaTKChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnRoleChanging(System.Nullable<int> value);
    partial void OnRoleChanged();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    #endregion
		
		public account()
		{
			this._PlayLists = new EntitySet<PlayList>(new Action<PlayList>(this.attach_PlayLists), new Action<PlayList>(this.detach_PlayLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTK", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaTK
		{
			get
			{
				return this._MaTK;
			}
			set
			{
				if ((this._MaTK != value))
				{
					this.OnMaTKChanging(value);
					this.SendPropertyChanging();
					this._MaTK = value;
					this.SendPropertyChanged("MaTK");
					this.OnMaTKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="VarChar(50)")]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int")]
		public System.Nullable<int> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50)")]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_PlayList", Storage="_PlayLists", ThisKey="MaTK", OtherKey="Matk")]
		public EntitySet<PlayList> PlayLists
		{
			get
			{
				return this._PlayLists;
			}
			set
			{
				this._PlayLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayLists(PlayList entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_PlayLists(PlayList entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChuDe")]
	public partial class ChuDe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaCD;
		
		private string _TenCD;
		
		private string _Picture;
		
		private string _Color;
		
		private EntitySet<Nhac> _Nhacs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaCDChanging(int value);
    partial void OnMaCDChanged();
    partial void OnTenCDChanging(string value);
    partial void OnTenCDChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public ChuDe()
		{
			this._Nhacs = new EntitySet<Nhac>(new Action<Nhac>(this.attach_Nhacs), new Action<Nhac>(this.detach_Nhacs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaCD
		{
			get
			{
				return this._MaCD;
			}
			set
			{
				if ((this._MaCD != value))
				{
					this.OnMaCDChanging(value);
					this.SendPropertyChanging();
					this._MaCD = value;
					this.SendPropertyChanged("MaCD");
					this.OnMaCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenCD", DbType="NVarChar(100)")]
		public string TenCD
		{
			get
			{
				return this._TenCD;
			}
			set
			{
				if ((this._TenCD != value))
				{
					this.OnTenCDChanging(value);
					this.SendPropertyChanging();
					this._TenCD = value;
					this.SendPropertyChanged("TenCD");
					this.OnTenCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(100)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="Char(20)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChuDe_Nhac", Storage="_Nhacs", ThisKey="MaCD", OtherKey="MaCD")]
		public EntitySet<Nhac> Nhacs
		{
			get
			{
				return this._Nhacs;
			}
			set
			{
				this._Nhacs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nhacs(Nhac entity)
		{
			this.SendPropertyChanging();
			entity.ChuDe = this;
		}
		
		private void detach_Nhacs(Nhac entity)
		{
			this.SendPropertyChanging();
			entity.ChuDe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nhac")]
	public partial class Nhac : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaBH;
		
		private string _TenBH;
		
		private string _Files;
		
		private string _image;
		
		private System.Nullable<System.DateTime> _NgayPH;
		
		private System.Nullable<int> _MaCS;
		
		private System.Nullable<int> _MaTL;
		
		private System.Nullable<int> _MaCD;
		
		private EntitySet<PlayList> _PlayLists;
		
		private EntityRef<ChuDe> _ChuDe;
		
		private EntityRef<CaSi> _CaSi;
		
		private EntityRef<TheLoai> _TheLoai;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaBHChanging(int value);
    partial void OnMaBHChanged();
    partial void OnTenBHChanging(string value);
    partial void OnTenBHChanged();
    partial void OnFilesChanging(string value);
    partial void OnFilesChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnNgayPHChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayPHChanged();
    partial void OnMaCSChanging(System.Nullable<int> value);
    partial void OnMaCSChanged();
    partial void OnMaTLChanging(System.Nullable<int> value);
    partial void OnMaTLChanged();
    partial void OnMaCDChanging(System.Nullable<int> value);
    partial void OnMaCDChanged();
    #endregion
		
		public Nhac()
		{
			this._PlayLists = new EntitySet<PlayList>(new Action<PlayList>(this.attach_PlayLists), new Action<PlayList>(this.detach_PlayLists));
			this._ChuDe = default(EntityRef<ChuDe>);
			this._CaSi = default(EntityRef<CaSi>);
			this._TheLoai = default(EntityRef<TheLoai>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaBH", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaBH
		{
			get
			{
				return this._MaBH;
			}
			set
			{
				if ((this._MaBH != value))
				{
					this.OnMaBHChanging(value);
					this.SendPropertyChanging();
					this._MaBH = value;
					this.SendPropertyChanged("MaBH");
					this.OnMaBHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenBH", DbType="NVarChar(100)")]
		public string TenBH
		{
			get
			{
				return this._TenBH;
			}
			set
			{
				if ((this._TenBH != value))
				{
					this.OnTenBHChanging(value);
					this.SendPropertyChanging();
					this._TenBH = value;
					this.SendPropertyChanged("TenBH");
					this.OnTenBHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Files", DbType="VarChar(100)")]
		public string Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				if ((this._Files != value))
				{
					this.OnFilesChanging(value);
					this.SendPropertyChanging();
					this._Files = value;
					this.SendPropertyChanged("Files");
					this.OnFilesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="NVarChar(200)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayPH", DbType="Date")]
		public System.Nullable<System.DateTime> NgayPH
		{
			get
			{
				return this._NgayPH;
			}
			set
			{
				if ((this._NgayPH != value))
				{
					this.OnNgayPHChanging(value);
					this.SendPropertyChanging();
					this._NgayPH = value;
					this.SendPropertyChanged("NgayPH");
					this.OnNgayPHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCS", DbType="Int")]
		public System.Nullable<int> MaCS
		{
			get
			{
				return this._MaCS;
			}
			set
			{
				if ((this._MaCS != value))
				{
					if (this._CaSi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaCSChanging(value);
					this.SendPropertyChanging();
					this._MaCS = value;
					this.SendPropertyChanged("MaCS");
					this.OnMaCSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTL", DbType="Int")]
		public System.Nullable<int> MaTL
		{
			get
			{
				return this._MaTL;
			}
			set
			{
				if ((this._MaTL != value))
				{
					if (this._TheLoai.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTLChanging(value);
					this.SendPropertyChanging();
					this._MaTL = value;
					this.SendPropertyChanged("MaTL");
					this.OnMaTLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCD", DbType="Int")]
		public System.Nullable<int> MaCD
		{
			get
			{
				return this._MaCD;
			}
			set
			{
				if ((this._MaCD != value))
				{
					if (this._ChuDe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaCDChanging(value);
					this.SendPropertyChanging();
					this._MaCD = value;
					this.SendPropertyChanged("MaCD");
					this.OnMaCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nhac_PlayList", Storage="_PlayLists", ThisKey="MaBH", OtherKey="MaBH")]
		public EntitySet<PlayList> PlayLists
		{
			get
			{
				return this._PlayLists;
			}
			set
			{
				this._PlayLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChuDe_Nhac", Storage="_ChuDe", ThisKey="MaCD", OtherKey="MaCD", IsForeignKey=true)]
		public ChuDe ChuDe
		{
			get
			{
				return this._ChuDe.Entity;
			}
			set
			{
				ChuDe previousValue = this._ChuDe.Entity;
				if (((previousValue != value) 
							|| (this._ChuDe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChuDe.Entity = null;
						previousValue.Nhacs.Remove(this);
					}
					this._ChuDe.Entity = value;
					if ((value != null))
					{
						value.Nhacs.Add(this);
						this._MaCD = value.MaCD;
					}
					else
					{
						this._MaCD = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChuDe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaSi_Nhac", Storage="_CaSi", ThisKey="MaCS", OtherKey="MaCS", IsForeignKey=true)]
		public CaSi CaSi
		{
			get
			{
				return this._CaSi.Entity;
			}
			set
			{
				CaSi previousValue = this._CaSi.Entity;
				if (((previousValue != value) 
							|| (this._CaSi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaSi.Entity = null;
						previousValue.Nhacs.Remove(this);
					}
					this._CaSi.Entity = value;
					if ((value != null))
					{
						value.Nhacs.Add(this);
						this._MaCS = value.MaCS;
					}
					else
					{
						this._MaCS = default(Nullable<int>);
					}
					this.SendPropertyChanged("CaSi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheLoai_Nhac", Storage="_TheLoai", ThisKey="MaTL", OtherKey="MaTL", IsForeignKey=true)]
		public TheLoai TheLoai
		{
			get
			{
				return this._TheLoai.Entity;
			}
			set
			{
				TheLoai previousValue = this._TheLoai.Entity;
				if (((previousValue != value) 
							|| (this._TheLoai.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TheLoai.Entity = null;
						previousValue.Nhacs.Remove(this);
					}
					this._TheLoai.Entity = value;
					if ((value != null))
					{
						value.Nhacs.Add(this);
						this._MaTL = value.MaTL;
					}
					else
					{
						this._MaTL = default(Nullable<int>);
					}
					this.SendPropertyChanged("TheLoai");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayLists(PlayList entity)
		{
			this.SendPropertyChanging();
			entity.Nhac = this;
		}
		
		private void detach_PlayLists(PlayList entity)
		{
			this.SendPropertyChanging();
			entity.Nhac = null;
		}
	}
}
#pragma warning restore 1591
